name: container-image
run-name: Build a container Image

on:
  push:
    branches: [ "main", "develop"]
  pull_request:
    branches: [ "main", "develop"]

env:
  registry_username: ${{ vars.REGISTRY_USERNAME }}
  registry_password: ${{ secrets.REGISTRY_PASSWORD }}
  registry_host: ${{ vars.REGISTRY_HOST }}
  container_id: $(date +%s)
  contaner_name: platform-demo
  
jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Docker Auth
      id: docker-auth
      uses: 'docker/login-action@v1'
      with:
        username: ${{ env.registry_username }}
        password: ${{ env.registry_password }}
        registry: ${{ env.registry_host }}

    - name: Set container id
      id: container_id
      run: echo "::set-output name=ID::${{ env.container_id }}"

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'

    - name: Install frozen-lockfile
      run: yarn install --frozen-lockfile
      working-directory: ./backstage

    - name: Install backend build
      run: yarn --cwd packages/backend build  
      working-directory: ./backstage

    - name: Yarn build image
      run: |
        export DOCKER_BUILDKIT=1
        yarn build-image
      working-directory: ./backstage

    - name: Create tagPublish the image
      run: |
        docker tag backstage:latest ${{ env.registry_host }}/${{ env.registry_username }}/desafio-stn:${{ steps.container_id.outputs.ID }}
      working-directory: ./

    - name: Publish the image
      run: |
        docker push ${{ env.registry_host }}/${{ env.registry_username }}/desafio-stn:${{ steps.container_id.outputs.ID }}
      working-directory: ./

    # - name: Build and push
    #   uses: docker/build-push-action@v6
    #   with:
    #     file: ./backstage/packages/backend/Dockerfile
    #     context: ./backstage
    #     push: true
    #     tags: ${{ env.registry_host }}/${{ env.registry_username }}/${{ env.contaner_name }}:${{ steps.container_id.outputs.ID }}
        # build-args: 

    # - name: Build the container image
    #   run: |
    #     export  LOCALPATH=`$(pwd)`
    #     DOCKER_BUILDKIT=1
    #     docker build --tag ${{ env.registry_host }}/${{ env.registry_username }}/${{ env.contaner_name }}:${{ steps.container_id.outputs.ID }}  --build-args LOCALPATH=$LOCALPATH  -f ./packages/backend/Dockerfile .
    #   working-directory: ./backstage

    # - name: Publish the image
    #   run: |
    #     echo docker push ${{ env.registry_host }}/${{ env.registry_username }}/${{ env.contaner_name }}:${{ steps.container_id.outputs.ID }}
    #   working-directory: ./

  otel-export-trace:
    if: always()
    name: OpenTelemetry Export Build Image
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - name: Export Workflow Trace
      uses: inception-health/otel-export-trace-action@latest
      with:
        otlpEndpoint: grpc://api.honeycomb.io:443/
        otlpHeaders: ${{ secrets.OTLP_HEADERS }}
        githubToken: ${{ secrets.GIT_TOKEN }}
        otelServiceName: build-image
